#!/bin/bash
#
# Name: Matew - Make Album The Easy Way
# Author: Bernardo 'inquis' Damele <bernardo@inquis.it>
#
# Matew is a valid HTML/CSS generator for static image albums. It supports
# retrieving information from EXIF cameras and includes customizable options
# like character set encoding. Albums may contain sub albums, and the
# appearance of an album can be fully personalized and customized choosing a
# CSS style file, setting names and descriptions of albums and individual
# images.
#
# This is a bash script, therefore should run on any Linux box.
# It needs the standard bash commands. Additionally it needs convert
# and identify, two command line tools of the ImageMagick package to
# handle image files.
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GOPYING file for more details.

# Script details (Do NOT edit this details)
AUTHOR_NAME="Bernardo 'inquis' Damele"
AUTHOR_EMAIL="bernardo@inquis.it"
SCRIPT_NAME="Matew"
SCRIPT_PID="`ps a | grep matew | awk '{print $1}' | head -1`"
SCRIPT_PATH="`ls -l /proc/$SCRIPT_PID/fd 2>/dev/null | grep matew | awk '{print $11}' | sed -n 's/\([^/]*.*[/$]\).*/\1/p'`"
SCRIPT_URL="http://matew.sourceforge.net"
SCRIPT_VERSION="1.6-rc1"

# Configuration parameters (Do NOT edit this parameters)
CONFIG_FILE="$HOME/.matew/conf"
RCONF="/etc"
TEMP="/tmp"

# Matew functions
version() {
  echo -e "$SCRIPT_NAME, version $SCRIPT_VERSION, Feb 2004, $AUTHOR_NAME"
}

report() {
  echo -e "\nPlease report bugs or suggestions to <$AUTHOR_EMAIL>"
}

help() {
  cat << HELP
`version`

Usage: `basename $0` [option] <source path> <target path>

$SCRIPT_NAME is a valid HTML/CSS generator for static image albums. It
supports retrieving information from EXIF cameras and includes customizable
options like character set encoding. Albums may contain sub albums, and the
appearance of an album can be fully personalized and customized choosing a
CSS style file, setting names and descriptions of albums and individual
images.

options:
  -i                    create information files in target path
  -h                    print this message
  -v                    print verbose output messages
  -V                    print script version
`report`
HELP
}

backup_original_html() {
  for DIR in `cat $TEMP/matew-$USER/dirs`; do
    if [ -f "$DIR/index.html" ]; then
      if [ "`tail -1 $DIR/index.html`" != "<!-- Album generated by $SCRIPT_NAME $SCRIPT_VERSION -->" ]; then
        if [ $VERBOSE -ge 1 ]; then
          echo -e "         \\033[0;34m>\\033[0m Backupping \\033[0;36m$DIR/index.html\\033[0m to \\033[0;36m$DIR/BACKUP\\033[0m"
        fi

        if [ ! -d $DIR/BACKUP ]; then
          mkdir $DIR/BACKUP
        fi
        mv -f $DIR/index.html $DIR/BACKUP/index.html 2>/dev/null
      fi
    fi
  done
}

clean_html() {
  for DIR in `cat $TEMP/matew-$USER/dirs`; do
    if [ -f "$DIR/index.html" ]; then
      if [ "`tail -1 $DIR/index.html`" = "<!-- Album generated by $SCRIPT_NAME $SCRIPT_VERSION -->" ] || [ "$DPATH" != "$TPATH" ]; then
        rm -f $DIR/index*.html 2>/dev/null
      fi
    fi
  done
}

cleanup() {
  for NUM in `seq 0 2`; do
    kill -9 `pidof identify` 2>/dev/null
    kill -9 `pidof convert` 2>/dev/null
  done
  rm -rf $TEMP/matew-$USER 2>/dev/null
  rm -f $TEMP/.matew* 2>/dev/null

  if [ -z "$2" ]; then
    echo
  else
    echo -e "\n\n\033[1mWARNING\\033[0m: It looks like you halted matew before it was done.\n\
         Run it again to completion.\n"
  fi

  exit $1
}

error() {
  echo -e "\\033[0;31mERROR\\033[0m: This script depends on both \\033[0;36mconvert\\033[0m and \\033[0;36midentify\\033[0m,\n\
       two command line tools. Install the ImageMagick package."
  cleanup 1
}

checks() {
  which convert 1>/dev/null 2>&1 || error
  which identify 1>/dev/null 2>&1 || error

  if [ ! -f $CONFIG_FILE ]; then
    echo -e "\n\\033[1mWARNING\\033[0m: It seems this is the first time you run matew. Please run\n\
         matew-wizard first and read instructions."
    cleanup 1
  elif [ ! -r $CONFIG_FILE ]; then
    echo -e "\n\\033[0;31mERROR\\033[0m: Configuration file \\033[0;36m$CONFIG_FILE\\033[0m not readable\n\
         Try chmod 400 $CONFIG_FILE"
    cleanup 1
  elif [ ! -d "$DPATH" ]; then
    echo -e "\n\\033[0;31mERROR\\033[0m: Path \\033[0;36m$DPATH\\033[0m is not a directory"
    cleanup 1
  elif [ ! -w "$DPATH" ]; then
    echo -e "\n\\033[0;31mERROR\\033[0m: Path \\033[0;36m$DPATH\\033[0m is not writable (chmod +w $DPATH)"
    cleanup 1
  else
    echo -e "\n\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Parsing options from \\033[0;36m$CONFIG_FILE\\033[0m to the script"
    . $CONFIG_FILE
    if [ "$LANG" != "en" ]; then
      DATE="`date +'%d/%m/%G'`"
    else
      DATE="`date +'%b %d %G'`"
    fi
    TIME="`date +'%R:%S'`"

    echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Checking directory path"
    echo "$DPATH" | grep -q " "
    if [ $? -eq 0 ]; then
     OLDNAME="$DPATH"
     NEWNAME="`echo \"$DPATH\" | sed -e \"s/ /_/g\"`"
     mv -f "$OLDNAME" "$NEWNAME"
     DPATH="$NEWNAME"
    fi

    if [ -e $TEMP/matew-$USER ]; then
      rm -rf $TEMP/matew-$USER 2>/dev/null
    fi
    mkdir $TEMP/matew-$USER $TEMP/matew-$USER/DIRS 2>/dev/null

    echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Checking images, this step could take a moment"

    if [ "`echo "$DPATH" | cut -c 1`" != "/" ] && [ "`echo "$DPATH" | cut -c 1`" != "~" ] && [ "`echo "$DPATH" | cut -c 1-2`" != "./" ]; then
      DPATH="./$DPATH"
      if [ "$TPATH" != "$DPATH" ]; then
        if [ "`echo "$TPATH" | cut -c 1`" != "/" ] && [ "`echo "$TPATH" | cut -c 1`" != "~" ] && [ "`echo "$TPATH" | cut -c 1-2`" != "./" ]; then
          TPATH="./$TPATH"
        fi
      fi
    fi

    TOT="0"
    ls -1BR $DPATH | tr -d ':' | grep -v "^$" | grep "\/" | grep -v "\/data$" | grep -v "\/BACKUP$" | grep -v "\/BACKUP-data$" > $TEMP/matew-$USER/dirs
    for DIR in `cat $TEMP/matew-$USER/dirs`; do
      DIR="`echo ${DIR%/}`"

      ls -1B $DIR | grep -v ".html$" | grep -v ".css$" | grep -v "description" | grep -v "BACKUP" | grep -v "BACKUP-data" > $TEMP/matew-$USER/files 2>/dev/null
      if [ -s $TEMP/matew-$USER/files ]; then
        for FILE in `cat $TEMP/matew-$USER/files`; do
           echo $FILE | grep -q "[aA][vV][iI]"
           if [ $? -eq 0 ]; then
             cat $TEMP/matew-$USER/files | grep -v $FILE > $TEMP/matew-$USER/files
           else
             echo $FILE | grep -q "[mM][pP][gG]"
             if [ $? -eq 0 ]; then
               cat $TEMP/matew-$USER/files | grep -v $FILE > $TEMP/matew-$USER/files
             else
               echo $FILE | grep -q "[mM][pP][eE][gG]"
               if [ $? -eq 0 ]; then
                 cat $TEMP/matew-$USER/files | grep -v $FILE > $TEMP/matew-$USER/files
               else
                 echo $FILE | grep -q "[tT][xX][tT]"
                 if [ $? -eq 0 ]; then
                   cat $TEMP/matew-$USER/files | grep -v $FILE > $TEMP/matew-$USER/files
                 fi
               fi
             fi
           fi
        done
      fi

      if [ -s $TEMP/matew-$USER/files ]; then
        for FILE in `cat $TEMP/matew-$USER/files`; do
          if [ ! -d $DIR/$FILE ]; then
            identify $DIR/$FILE 1>/dev/null 2>&1
            if [ $? -eq 0 ]; then
              TOT=`expr $TOT + 1`
              echo "$DIR/$FILE" >> $TEMP/matew-$USER/images
              echo "$DIR/$FILE" >> $TEMP/matew-$USER/DIRS/`echo $DIR | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`
            else
              echo "$DIR/$FILE" >> $TEMP/matew-$USER/no_images
              if [ $VERBOSE -ge 1 ]; then
                echo -e "         \\033[0;34m>\\033[0m \\033[0;36m$DIR/$FILE\\033[0m is not a valid image, skipping"
              fi
            fi
          elif [ -z "`ls -1BF $DIR/$FILE | grep -v '\/' | grep -v .html$ | grep -v .css$ | grep -v description`" ]; then
            echo "$DIR/$FILE" >> $TEMP/matew-$USER/empty
          fi
        done
      else
        cat $TEMP/matew-$USER/dirs | grep -v "$DIR$" > $TEMP/matew-$USER/dirs
        echo "$DIR" | sed -n 's/.*\/\([^/]*.*\).*/\1/p' >> $TEMP/matew-$USER/data_no_dirs
      fi
      rm $TEMP/matew-$USER/files
    done

    if [ -f $TEMP/matew-$USER/empty ]; then
      cat $TEMP/matew-$USER/empty | grep -v "BACKUP" | grep -v "BACKUP-data" > $TEMP/matew-$USER/empty
      for ITEM in `cat $TEMP/matew-$USER/empty`; do
        if [ -z "`cat $TEMP/matew-$USER/images | grep $ITEM`" ]; then
          cat $TEMP/matew-$USER/dirs | grep -v "`echo "$ITEM" | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`" > $TEMP/matew-$USER/dirs
          echo "$ITEM" | sed -n 's/.*\/\([^/]*.*\).*/\1/p' >> $TEMP/matew-$USER/data_no_dirs
        fi
      done
      rm -f $TEMP/matew-$USER/empty
    fi

    if [ $TOT -eq 0 ]; then
      echo -e "\n\\033[0;31mERROR\\033[0m: There are no valid images in \\033[0;36m$DPATH\\033[0m"
      cleanup 1
    elif [ "$DPATH" != "$TPATH" ]; then
      echo "$TPATH" | grep -q " "
      if [ $? -eq 0 ]; then
        OLDNAME="$TPATH"
        NEWNAME="`echo \"$TPATH\" | sed -e \"s/ /_/g\"`"
        TPATH="$NEWNAME"
      fi

      if [ ! -d "$TPATH" ]; then
        mkdir -p $TPATH
      fi

      TPATH="`echo ${TPATH%/} | sed -e \"s/\//\\\//g\"`"
      NDPATH="`echo ${DPATH%/} | sed -e \"s/\//\\\//g\"`"

      for DIR in `cat $TEMP/matew-$USER/dirs`; do
        echo "${DIR/$NDPATH/$TPATH}" >> $TEMP/matew-$USER/dirs.new

        if [ ! -d "${DIR/$NDPATH/$TPATH}" ]; then
          mkdir -p "${DIR/$NDPATH/$TPATH}"
        fi
      done
      mv $TEMP/matew-$USER/dirs.new $TEMP/matew-$USER/dirs

      for IMAGE in `cat $TEMP/matew-$USER/images`; do
        echo "${IMAGE/$NDPATH/$TPATH}" >> $TEMP/matew-$USER/images.new

        if [ ! -f "${IMAGE/$NDPATH/$TPATH}" ]; then
          cp -f $IMAGE ${IMAGE/$NDPATH/$TPATH}
        fi
      done
      mv $TEMP/matew-$USER/images.new $TEMP/matew-$USER/images

      for FILE in `ls -1 $TEMP/matew-$USER/DIRS/`; do
        for IMAGE in `cat $TEMP/matew-$USER/DIRS/$FILE`; do
          echo "${IMAGE/$NDPATH/$TPATH}" >> $TEMP/matew-$USER/DIRS/$FILE.new
        done
        mv $TEMP/matew-$USER/DIRS/$FILE.new $TEMP/matew-$USER/DIRS/$FILE

        if [ "$FILE" = "`echo $DPATH | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`" ]; then
          mv $TEMP/matew-$USER/DIRS/$FILE $TEMP/matew-$USER/DIRS/`echo $TPATH | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`
        fi
      done
    fi

    if [ -f "$TEMP/matew-$USER/data_no_dirs" ]; then
      cat $TEMP/matew-$USER/data_no_dirs | sort | uniq > $TEMP/matew-$USER/data_no_dirs
    fi

    cat $TEMP/matew-$USER/images | sed -n 's/\([^/]*.*[/$]\).*/\1/p' | uniq > $TEMP/matew-$USER/data_dirs.uniq
  fi
}

process_data_dirs() {
  for DIR in `cat $TEMP/matew-$USER/data_dirs.uniq`; do
    DIR="`echo ${DIR%/}`"
    if [ ! -d $DIR/data ]; then
      if [ $VERBOSE -ge 2 ]; then
        echo -e "         \\033[0;34m>\\033[0m Creating subdirectory \\033[0;36m$DIR/data\\033[0m"
      fi
      rm -f $DIR 2>/dev/null
      mkdir $DIR/data
      echo "AddDefaultCharset $CHARSET" > $DIR/data/.htaccess
    else
      if [ ! -f "$DIR/data/.htaccess" ]; then
        echo -e "         \\033[0;34m>\\033[0m Backupping \\033[0;36m$DIR/data\\033[0m to \\033[0;36m$DIR/BACKUP-data\\033[0m"
        mv -f $DIR/data $DIR/BACKUP-data
        echo -e "         \\033[0;34m>\\033[0m Creating subdirectory \\033[0;36m$DIR/data\\033[0m"
        mkdir $DIR/data
        echo "AddDefaultCharset $CHARSET" > $DIR/data/.htaccess
      elif [ $VERBOSE -ge 2 ]; then
        echo -e "         \\033[0;34m>\\033[0m Subdirectory \\033[0;36m$DIR/data\\033[0m exists"
      fi
    fi
  done
}

process_information_files() {
  for DIR in `cat $TEMP/matew-$USER/dirs`; do
    BSDIR="`echo $DIR | sed s/\"\/\"/\"\\\/\"/g`"
    if  [ ! -f $DIR/album_description ] || [ -z "`cat $DIR/album_description 2>/dev/null | grep 'Album image identifier' | sed s/'"'/''/g | awk '{print $4}'`" ]; then
      if [ $VERBOSE -ge 2 ]; then
        echo -e "         \\033[0;34m>\\033[0m Creating \\033[0;36m$DIR/album_description\\033[0m"
      fi
      echo "Album name \"\"" > $DIR/album_description
      echo "Album description \"\"" >> $DIR/album_description
      TMPIMIDENT="`cat $TEMP/matew-$USER/images | grep "$DIR" | head -1`"
      IMIDENT="`echo ${TMPIMIDENT/$BSDIR\//}`"
      echo "Album image identifier \"$IMIDENT\"" >> $DIR/album_description
    fi
  done

  for DIR in `cat $TEMP/matew-$USER/data_dirs.uniq`; do
    DIR="`echo ${DIR%/}`"
    DNAME="`echo $DIR | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`"

    if [ $VERBOSE -ge 2 ]; then
      if [ ! -f $DIR/image_descriptions ]; then
        echo -e "         \\033[0;34m>\\033[0m Creating \\033[0;36m$DIR/image_descriptions\\033[0m"
      elif [ "`cat $TEMP/matew-$USER/DIRS/$DNAME | wc -l | sed s/^\ *//`" != "`cat $DIR/image_descriptions 2>/dev/null | wc -l | sed s/^\ *//`" ]; then
        echo -e "         \\033[0;34m>\\033[0m Updating \\033[0;36m$DIR/image_descriptions\\033[0m"
      fi
    fi

    for IMAGE in `cat $TEMP/matew-$USER/DIRS/$DNAME`; do
      IMAGE="`echo $IMAGE | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`"
      if [ -z "`cat $DIR/image_descriptions 2>/dev/null | grep '^$IMAGE'`" ]; then
        echo "$IMAGE \"\"" >> $DIR/image_descriptions
      fi
    done

    sort $DIR/image_descriptions | uniq > $DIR/image_descriptions.new
    mv $DIR/image_descriptions.new $DIR/image_descriptions
  done
}

create_image() {
  if [ $VERBOSE -ge 2 ]; then
    echo -e "           \\033[0;34m>\\033[0m Creating thumbnail \\033[0;36mTn_$ORIGNAME\\033[0m... \c"
  fi

  if [ $WIDTH -le 150 ] && [ $HEIGHT -le 150 ]; then
    cp "$IMAGE" $ORIGPATH/data/Tn_$ORIGNAME
  else
    if [ "$RATIO" = "yes" ]; then
      convert -geometry 140x140 "$IMAGE" $ORIGPATH/data/Tn_$ORIGNAME 1>/dev/null 2>&1
    else
      convert -geometry 140x140! "$IMAGE" $ORIGPATH/data/Tn_$ORIGNAME 1>/dev/null 2>&1
    fi
  fi
  if [ $VERBOSE -ge 2 ]; then
    echo -e "Done"
  fi

  if [ $VERBOSE -ge 2 ]; then
    echo -e "           \\033[0;34m>\\033[0m Creating small size \\033[0;36mSm_$ORIGNAME\\033[0m... \c"
  fi
  convert -geometry 40% "$IMAGE" $ORIGPATH/data/Sm_$ORIGNAME 1>/dev/null 2>&1
  if [ $VERBOSE -ge 2 ]; then
    echo -e "Done"
  fi

  if [ $VERBOSE -ge 2 ]; then
    echo -e "           \\033[0;34m>\\033[0m Creating medium size \\033[0;36mMed_$ORIGNAME\\033[0m... \c"
  fi
  convert -geometry 60% "$IMAGE" $ORIGPATH/data/Med_$ORIGNAME 1>/dev/null 2>&1
  if [ $VERBOSE -ge 2 ]; then
    echo -e "Done"
  fi
}

process_images() {
  for IMAGE in `cat $TEMP/matew-$USER/images`; do
    ORIGPATH="`echo $IMAGE | sed -n 's/\([^/]*.*[/$]\).*/\1/p'`"
    ORIGNAME="`echo $IMAGE | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`"
    WIDTH="`identify -format \"%w\" $IMAGE 2>/dev/null | head \-1`"
    HEIGHT="`identify -format \"%h\" $IMAGE 2>/dev/null | head \-1`"

    if [ $VERBOSE -ge 1 ]; then
      echo -e "         \\033[0;34m>\\033[0m Processing image \\033[0;36m$ORIGNAME\\033[0m"
    fi

    if [ ! -e $ORIGPATH/data/Tn_$ORIGNAME ] || [ ! -e $ORIGPATH/data/Sm_$ORIGNAME ] || [ ! -e $ORIGPATH/data/Med_$ORIGNAME ]; then
      create_image
    else
      if [ "$ANS" = "All" ] || [ "$ANS" = "all" ]; then
        create_image
      elif [ "$ANS" != "None" ] && [ "$ANS" != "none" ]; then
        if [ $VERBOSE -eq 0 ]; then
          ANS="All"
        else
          echo -e "           \\033[0;34m>\\033[0m Data already exists, do you want to process anyway? [Yes|No|All|None] (default: Yes) \c"
          read ANS
        fi
        if [ -z "$ANS" ] || [ "$ANS" = "Yes" ] || [ "$ANS" = "yes" ] || [ "$ANS" = "All" ] || [ "$ANS" = "all" ]; then
          create_image
        fi
      elif [ "$ANS" = "None" ] || [ "$ANS" = "none" ]; then
        if [ $VERBOSE -ge 1 ]; then
          echo -e "           \\033[0;34m>\\033[0m Data already exists, skipping"
        fi
      fi
    fi
  done
}

process_endpoint() {
  ENDPOINT=""
  NCOUNT="`expr $COUNT - 1`"
  if [ $NCOUNT -ge 1 ]; then
    for CC in `seq 1 $NCOUNT`; do
      ENDPOINT="../$ENDPOINT"
    done
  else
    ENDPOINT=""
  fi
}

process_main_endpoint() {
  ENDPOINT=""
  for CC in `seq 1 $COUNT`; do
    ENDPOINT="../$ENDPOINT"
  done
}

html_parser() {
  if [ "$DIR" = "$DPATH" ]; then
    ENDPOINT="./"
  else
    process_main_endpoint
  fi

  ALBUMNAME="`grep -i 'Album name' $DIR/album_description 2>/dev/null | tr -d '\"\t' | sed s/'Album name'/''/g | sed s/^\ *//`"
  if [ -z "$ALBUMNAME" ]; then
    ALBUMNAME="`echo $DIR | sed -n 's/.*\/\([^/]*\).*/\1/p' | sed -e 's/_/ /g'`"
  fi
  ALBUMDESC="`grep -i 'Album description' $DIR/album_description 2>/dev/null | tr -d '\"\t' | sed s/'Album description'/''/g | sed s/^\ *//`"
}

html_open() {
  echo "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">" > $1.html
  echo "<html>" >> $1.html
  echo "<head>" >> $1.html
  echo "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=$CHARSET\">" >> $1.html
  echo "<meta name=\"generator\" content=\"$SCRIPT_NAME ($SCRIPT_URL)\">" >> $1.html
  echo "<meta name=\"robots\" content=\"all\">" >> $1.html
  echo "<title>$2</title>" >> $1.html
  echo "<link rel=\"stylesheet\" href=\"${3}style.css\" type=\"text/css\">" >> $1.html
  echo "</head>" >> $1.html
  echo "<body>" >> $1.html
}

html_subopen() {
  echo "<a name=\"top\"></a>" >> $1.html

  if [ -z "$3" ]; then
    echo "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" >> $1.html
  else
    echo "<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"$3\" align=\"center\">" >> $1.html
  fi

  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\" class=\"table_up\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td>" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" align=\"center\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td colspan=\"1\" align=\"left\" class=\"table_title\">" >> $1.html
  echo "         $2" >> $1.html
  echo "        </td>" >> $1.html
}

html_path1() {
  if [ ! -z "$LINK" ]; then
    echo "         <font class=\"separator\">::</font> <a href=\"../${ENDPOINT}index.html\">$W_INDEX</a> <font class=\"separator\">&gt;&gt;</font>" >> $1.html
  else
    echo "         <a href=\"../${ENDPOINT}index.html\">$W_INDEX</a> <font class=\"separator\">&gt;&gt;</font>" >> $1.html
  fi

  C=1
  TITEM=""
  rm $TEMP/matew-$USER/.dirtree_comp 2>/dev/null

  for ITEM in `cat $TEMP/matew-$USER/.dirtree`; do
    if [ -z "$TITEM" ]; then
      echo "$DPATH/$ITEM" >> $TEMP/matew-$USER/.dirtree_comp
      TITEM="$ITEM"
    else
      echo "$DPATH/$TITEM/$ITEM" >> $TEMP/matew-$USER/.dirtree_comp
      TITEM="$TITEM/$ITEM"
    fi
  done

  if [ -f $TEMP/matew-$USER/.dirtree_comp ]; then
    LITEM="`cat $TEMP/matew-$USER/.dirtree_comp 2>/dev/null | tail -1`"
    for NITEM in `cat $TEMP/matew-$USER/.dirtree_comp 2>/dev/null`; do
      ALBUMNAME="`grep -i \"Album name\" $NITEM/album_description 2>/dev/null | tr -d '\"\t' | sed s/'Album name'//g | sed s/^\ *//`"
      if [ -z "$ALBUMNAME" ]; then
        ALBUMNAME="`echo $NITEM | sed -n 's/.*\/\([^/]*\).*/\1/p' | sed -e \"s/_/ /g\"`"
      fi
      if [ "$NITEM" != "$LITEM" ]; then
        echo "         <a href=\"${ENDPOINT}index.html\">$ALBUMNAME</a> <font class=\"separator\">&gt;</font>" >> $1.html
      else
        echo "         $ALBUMNAME" >> $1.html
      fi
      C="`expr $C + 3`"
      ENDPOINT="`echo $ENDPOINT | cut -c $C-`"
      C="`expr $C - 3`"
    done
  fi

  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
}

html_path2() {
  if [ `cat $TEMP/matew-$USER/data_dirs.uniq | wc -l | sed s/^\ *//` -gt 1 ]; then
    if [ ! -z "$LINK" ]; then
      echo "         <font class=\"separator\">::</font> $W_INDEX" >> $1.html
    else
      echo "         $W_INDEX" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi
  fi
}

html_image_path() {
  echo "       </tr>" >> $1.html

  if [ ! -z "$LINK" ]; then
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"1\" align=\"left\" class=\"table_paths\">" >> $1.html
    echo "         <a href=\"$LINK\">Homepage</a>" >> $1.html
  fi

  if [ `cat $TEMP/matew-$USER/data_dirs.uniq | wc -l | sed s/^\ *//` -gt 1 ]; then
    if [ ! -z "$LINK" ]; then
      if [ "$ENDPOINT" = "./" ]; then
        echo "         <font class=\"separator\">::</font> <a href=\"../index.html\">$W_INDEX</a> <font class=\"separator\">&gt;&gt;</font>" >> $1.html
      else
        echo "         <font class=\"separator\">::</font> <a href=\"../${ENDPOINT}index.html\">$W_INDEX</a> <font class=\"separator\">&gt;&gt;</font>" >> $1.html
      fi
    else
      echo "       <tr>" >> $1.html
      echo "        <td colspan=\"1\" align=\"left\" class=\"table_paths\">" >> $1.html
      if [ "$ENDPOINT" = "./" ]; then
        echo "         <a href=\"../index.html\">$W_INDEX</a> <font class=\"separator\">&gt;&gt;</font>" >> $1.html
      else
        echo "         <a href=\"../${ENDPOINT}index.html\">$W_INDEX</a> <font class=\"separator\">&gt;&gt;</font>" >> $1.html
      fi
    fi

    C=1
    TITEM=""
    rm $TEMP/matew-$USER/.dirtree_comp 2>/dev/null
    for ITEM in `cat $TEMP/matew-$USER/.dirtree`; do
      if [ -z "$TITEM" ]; then
        echo "$DPATH/$ITEM" >> $TEMP/matew-$USER/.dirtree_comp
        TITEM="$ITEM"
      else
        echo "$DPATH/$TITEM/$ITEM" >> $TEMP/matew-$USER/.dirtree_comp
        TITEM="$TITEM/$ITEM"
      fi
    done

    for NITEM in `cat $TEMP/matew-$USER/.dirtree_comp 2>/dev/null`; do
      ALBUMNAME="`grep -i \"Album name\" $NITEM/album_description 2>/dev/null | tr -d '\"\t' | sed s/'Album name'/''/g | sed s/^\ *//`"
      if [ -z "$ALBUMNAME" ]; then
        ALBUMNAME="`echo $NITEM | sed -n 's/.*\/\([^/]*\).*/\1/p' | sed -e \"s/_/ /g\"`"
      fi
        echo "         <a href=\"${ENDPOINT}index.html\">$ALBUMNAME</a> <font class=\"separator\">&gt;</font>" >> $1.html
      C="`expr $C + 3`"
      ENDPOINT="`echo $ENDPOINT | cut -c $C-`"
      C="`expr $C - 3`"
    done

    echo "         $TFILENAME" >> $1.html
  fi

  if [ ! -z "$LINK" ] || [ `cat $TEMP/matew-$USER/data_dirs.uniq | wc -l | sed s/^\ *//` -gt 1 ]; then
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  fi
}

html_middle1() {
  if [ "$DIR" != "$DPATH" ]; then
    process_endpoint

    if [ ! -z "$LINK" ]; then
      echo "       <tr>" >> $1.html
      echo "        <td colspan=\"2\" align=\"left\" class=\"table_paths\">" >> $1.html
      echo "         <a href=\"$LINK\">Homepage</a>" >> $1.html
      html_path1 "$1"
    elif [ `cat $TEMP/matew-$USER/data_dirs.uniq | wc -l | sed s/^\ *//` -gt 1 ]; then
      echo "       <tr>" >> $1.html
      echo "        <td colspan=\"2\" align=\"left\" class=\"table_paths\">" >> $1.html
      html_path1 "$1"
    fi
  else
    if [ ! -z "$LINK" ]; then
      echo "       <tr>" >> $1.html
      echo "        <td colspan=\"2\" align=\"left\" class=\"table_paths\">" >> $1.html
      echo "         <a href=\"$LINK\">Homepage</a>" >> $1.html
      html_path2 "$1"
    elif [ `cat $TEMP/matew-$USER/data_dirs.uniq | wc -l | sed s/^\ *//` -gt 1 ]; then
      echo "       <tr>" >> $1.html
      echo "        <td colspan=\"2\" align=\"left\" class=\"table_paths\">" >> $1.html
      html_path2 "$1"
    fi

    if [ ! -z "$LINK" ] || [ `cat $TEMP/matew-$USER/data_dirs.uniq | wc -l | sed s/^\ *//` -gt 1 ]; then
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi
  fi

  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" align=\"left\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td valign=\"top\" class=\"table_subtitle2\">" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"2\" cellspacing=\"0\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td colspan=\"2\" class=\"table_subtitle2\">" >> $1.html
  echo "         $W_ITA:" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td>" >> $1.html
  echo "         &nbsp;" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td>" >> $1.html
  echo "         <table border=\"0\" cellpadding=\"1\" cellspacing=\"0\" width=\"170\" class=\"table_subtitle2\">" >> $1.html
}

html_middle2() {
  echo "          <tr>" >> $1.html
  echo "           <td>" >> $1.html
  echo "            $W_SALBUMS" >> $1.html
  echo "           </td>" >> $1.html
  echo "          </tr>" >> $1.html
}

html_middle3() {
  echo "         </table>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "     <td>" >> $1.html
  echo "      &nbsp;" >> $1.html
  echo "     </td>" >> $1.html

  if [ ! -z "$ALBUMDESC" ]; then
   echo "     <td align=\"justify\" valign=\"top\">" >> $1.html
   echo "      <font class=\"text\">$ALBUMDESC</font>" >> $1.html
   echo "     </td>" >> $1.html
  fi

  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td align=\"center\">" >> $1.html
  echo "   &nbsp;" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\" class=\"table_misc\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td>" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_misc\">" >> $1.html
  echo "         $2" >> $1.html
}

html_middle4() {
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
}

html_middle5() {
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td>" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"2\" cellspacing=\"0\" width=\"100%\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\">" >> $1.html
  echo "         &nbsp;" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
}

html_middle6() {
  for ALBUM in `cat $TEMP/matew-$USER/.subalbums`; do
    IMGPATH=""
    IMGNAME=""
    ALBUM="`echo ${ALBUM%/}`"

    ALBUMNAME="`grep -i 'Album name' $DIR/$ALBUM/album_description 2>/dev/null | tr -d '\"\t' | sed s/'Album name'/''/g | sed s/^\ *//`"
    if [ -z "$ALBUMNAME" ]; then
      ALBUMNAME="`echo $ALBUM | sed s/'_'/' '/g`"
    fi

    ALBUMDESC="`grep -i 'Album description' $DIR/$ALBUM/album_description 2>/dev/null | tr -d '\"\t' | sed s/'Album description'/''/g | sed s/^\ *//`"

    ALBUMIMAGEID="`grep -i 'Album image identifier' $DIR/$ALBUM/album_description 2>/dev/null | tr -d '\"\t' | sed s/'Album image identifier'/''/g | sed s/^\ *//`"
    IMG="$DIR/$ALBUM/$ALBUMIMAGEID"
    identify -format %f $IMG 2>/dev/null | grep -v '^$' 1>/dev/null
    if [ $? -eq 0 ]; then
      IMGPATH="`echo $ALBUM/$ALBUMIMAGEID | sed -n 's/\([^/]*.*[/$]\).*/\1/p'`"
    else
      IMG="`cat $TEMP/matew-$USER/images | grep $ALBUM | head -1`"
      IMGPATH="`echo ${IMG#*$DIR\/} | sed -n 's/\([^/]*.*[/$]\).*/\1/p'`"
    fi
    IMGNAME="`identify -format %f $IMG 2>/dev/null | grep -v '^$'`"
    IMGPATH="${IMGPATH%/}"

    echo "       <tr>" >> $1.html
    echo "        <td align=\"left\" width=\"10%\">" >> $1.html
    echo "         <a href=\"./$ALBUM/index.html\" title=\"$W_CTVTSA\"><img src=\"./$IMGPATH/data/Tn_$IMGNAME\" border=\"1\" alt=\"$W_CTVTSA\"></a>" >> $1.html
    echo "        </td>" >> $1.html
    echo "        <td align=\"left\" valign=\"top\">" >> $1.html
    echo "         <table border=\"0\" width=\"100%\">" >> $1.html
    echo "          <tr>" >> $1.html
    echo "           <td colspan=\"2\" align=\"left\">" >> $1.html
    echo "            <a href=\"./$ALBUM/index.html\"><font class=\"text\"><b>$ALBUMNAME</b></font></a>" >> $1.html
    echo "           </td>" >> $1.html
    echo "           <td width=\"30%\" align=\"right\">" >> $1.html

    SACOUNT="0"
    ls -1BF $DIR/$ALBUM | grep -v '^$' | grep '\/' | sed s/'data\/'/''/g | sed s/'BACKUP\/'/''/g | sed s/'BACKUP-data\/'/''/g | sed s/^\ *// | sed s/'\/'/''/g > $TEMP/matew-$USER/.ssubalbums
    rm -f $TEMP/matew-$USER/.ssubalbums.new 2>/dev/null
    if [ -f "$TEMP/matew-$USER/data_no_dirs" ]; then
      for NODIR in `cat $TEMP/matew-$USER/data_no_dirs`; do
        cat $TEMP/matew-$USER/.ssubalbums | sed s/"$NODIR"/""/g | grep -v '^$' > $TEMP/matew-$USER/.ssubalbums
      done
    fi
    SACOUNT="`cat $TEMP/matew-$USER/.ssubalbums | grep -v '^$' | wc -l | sed s/^\ *//`"

    if [ -f $TEMP/matew-$USER/DIRS/$ALBUM ]; then
      SICOUNT="`cat $TEMP/matew-$USER/DIRS/$ALBUM | grep -v '^$' | wc -l | sed s/^\ *//`"
    else
      SICOUNT=""
    fi

    if [ ! -z "$SICOUNT" ] && [ $SACOUNT -eq 0 ]; then
      if [ $SICOUNT -eq 1 ]; then
        echo -e "            <font class=\"text\">$SICOUNT $W_IMAGE</font>" >> $1.html
      elif [ $SICOUNT -gt 1 ]; then
        echo -e "            <font class=\"text\">$SICOUNT $W_IMAGES</font>" >> $1.html
      fi
    elif [ ! -z "$SICOUNT" ] && [ $SACOUNT -eq 1 ]; then
      if [ $SICOUNT -eq 1 ]; then
        echo "            <font class=\"text\">$SICOUNT $W_IMAGE, $SACOUNT $W_SALBUM1</font>" >> $1.html
      elif [ $SICOUNT -gt 1 ]; then
        echo "            <font class=\"text\">$SICOUNT $W_IMAGES, $SACOUNT $W_SALBUM1</font>" >> $1.html
      fi
    elif [ ! -z "$SICOUNT" ] && [ $SACOUNT -gt 1 ]; then
      if [ $SICOUNT -eq 1 ]; then
        echo "            <font class=\"text\">$SICOUNT $W_IMAGE, $SACOUNT $W_SALBUMS1</font>" >> $1.html
      elif [ $SICOUNT -gt 1 ]; then
        echo "            <font class=\"text\">$SICOUNT $W_IMAGES, $SACOUNT $W_SALBUMS1</font>" >> $1.html
      fi
    elif [ -z "$SICOUNT" ] && [ $SACOUNT -eq 1 ]; then
      echo "            <font class=\"text\">$SACOUNT $W_SALBUM1</font>" >> $1.html
    elif [ -z "$SICOUNT" ] && [ $SACOUNT -gt 1 ]; then
      echo "            <font class=\"text\">$SACOUNT $W_SALBUMS1</font>" >> $1.html
    fi

    echo "           </td>" >> $1.html
    echo "          </tr>" >> $1.html

    if [ ! -z "$ALBUMDESC" ]; then
      echo "          <tr>" >> $1.html
      echo "           <td colspan=\"1\" width=\"1%\" align=\"left\">" >> $1.html
      echo "            &nbsp;&nbsp" >> $1.html
      echo "           </td>" >> $1.html
      echo "           <td colspan=\"1\" align=\"justify\">" >> $1.html
      echo "            <font class=\"text\">$ALBUMDESC</font>" >> $1.html
      echo "           </td>" >> $1.html
      echo "          </tr>" >> $1.html
    fi

    echo "         </table>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td align=\"left\">" >> $1.html
    echo "         &nbsp;" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  done
}

html_subclose1() {
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\" class=\"table_misc\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td>" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"center\" class=\"table_misc\">" >> $1.html
  echo "         &nbsp;" >> $1.html
}

html_subclose2() {
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo "</table>" >> $1.html
}

html_reference() {
  echo "<center>" >> $1.html
  echo "<p>$W_AGB <a href=\"$SCRIPT_URL\"><font class=\"text\">$SCRIPT_NAME</font></a> $SCRIPT_VERSION $W_ON $DATE $W_AT $TIME</p>" >> $1.html
  if [ "$VALIDATOR" != "yes" ]; then
    echo "</center>" >> $1.html
  fi
}

html_validator() {
  if [ "$VALIDATOR" = "yes" ]; then
    echo "<p><a href=\"http://validator.w3.org/check/referer\">" >> $1.html
    echo "<img src=\"http://www.w3.org/Icons/valid-html401\" border=\"0\" alt=\"Valid HTML 4.01!\"></a>" >> $1.html
    echo "<a href=\"http://jigsaw.w3.org/css-validator/\">" >> $1.html
    echo "<img src=\"http://jigsaw.w3.org/css-validator/images/vcss\" border=\"0\" alt=\"Valid CSS!\"></a></p>" >> $1.html
    echo "</center>" >> $1.html
  fi
}

html_close() {
  echo "</body>" >> $1.html
  echo "</html>" >> $1.html
  echo -e "\n<!-- Album generated by $SCRIPT_NAME -->" >> $1.html
}

html_image() {
    if [ "$DIR" != "$DPATH" ]; then
      process_main_endpoint
    fi

    if [ "$DIR" = "$DPATH" ]; then
      html_open "$DIR/data/$PREFIX$FILENAME" "$TFILENAME" "../"
    else
      html_open "$DIR/data/$PREFIX$FILENAME" "$TFILENAME" "../$ENDPOINT"
    fi

    html_subopen "$DIR/data/$PREFIX$FILENAME" "$TFILENAME"
    html_image_path "$DIR/data/$PREFIX$FILENAME"

    echo "      </table>" >> $1.html
    echo "     </td>" >> $1.html
    echo "    </tr>" >> $1.html
    echo "   </table>" >> $1.html
    echo "  </td>" >> $1.html
    echo " </tr>" >> $1.html
    echo " <tr>" >> $1.html
    echo "  <td>" >> $1.html
    echo "   <table border=\"0\" cellpadding=\"4\" cellspacing=\"0\" align=\"center\">" >> $1.html
    echo "    <tr>" >> $1.html
    echo "     <td colspan=\"3\" align=\"center\">" >> $1.html
    echo "      &nbsp;" >> $1.html
    echo "     </td>" >> $1.html
    echo "    </tr>" >> $1.html
    echo "    <tr>" >> $1.html

    if [ $TOTIMGS -ne 1 ]; then
      echo "     <td align=\"left\" class=\"table_subtitle2\">" >> $1.html
      echo "      <a href=\"$PREFIX$PREV.html\">$W_PREV</a>&nbsp;&nbsp;" >> $1.html
      echo "     </td>" >> $1.html
    fi

    echo "     <td align=\"center\" class=\"table_subtitle2\">" >> $1.html

    if [ "$PREFIX" = "Sm_" ]; then
      echo "      $W_SMALL" >> $1.html
      echo "      &nbsp;<a href=\"./Med_$FILENAME.html\">$W_MEDIUM</a>&nbsp;" >> $1.html
      echo "      <a href=\"./$FILENAME.html\">$W_LARGE</a>" >> $1.html
    elif [ "$PREFIX" = "Med_" ]; then
      echo "      <a href=\"./Sm_$FILENAME.html\">$W_SMALL</a>" >> $1.html
      echo "      &nbsp;$W_MEDIUM&nbsp;" >> $1.html
      echo "      <a href=\"./$FILENAME.html\">$W_LARGE</a>" >> $1.html
    elif [ -z "$PREFIX" ]; then
      echo "      <a href=\"./Sm_$FILENAME.html\">$W_SMALL</a>" >> $1.html
      echo "      &nbsp;<a href=\"./Med_$FILENAME.html\">$W_MEDIUM</a>&nbsp;" >> $1.html
      echo "      $W_LARGE" >> $1.html
    fi

    echo "     </td>" >> $1.html

    if [ $TOTIMGS -ne 1 ]; then
      echo "     <td align=\"right\" class=\"table_subtitle2\">" >> $1.html
      echo "      &nbsp;&nbsp;<a href=\"$PREFIX$NEXT.html\">$W_NEXT</a>" >> $1.html
      echo "     </td>" >> $1.html
    fi

    echo "    <tr align=\"center\" valign=\"middle\">" >> $1.html
    echo "     <td colspan=\"3\" class=\"table_misc\">" >> $1.html
    echo "      <a href=\"$PPREFIX$FILENAME\" title=\"$FILENAME\"><img src=\"$PPREFIX$FILENAME\" border=\"0\" alt=\"$FILENAME\"></a>" >> $1.html
    echo "     </td>" >> $1.html
    echo "    </tr>" >> $1.html
    echo "    <tr>" >> $1.html
    echo "     <td colspan=\"3\" align=\"center\" class=\"table_subtitle\">" >> $1.html
    echo "      <a href=\"./$FILENAME.details.html\">$W_IMAGEINFO</a>" >> $1.html
    echo "     </td>" >> $1.html
    echo "    </tr>" >> $1.html
    echo "    <tr>" >> $1.html
    echo "     <td colspan=\"3\" align=\"center\">" >> $1.html
    echo "      &nbsp;" >> $1.html
    echo "     </td>" >> $1.html
    echo "    </tr>" >> $1.html
    echo "   </table>" >> $1.html
    echo "  </td>" >> $1.html
    echo " </tr>" >> $1.html
    echo " <tr>" >> $1.html
    echo "  <td>" >> $1.html
    echo "   <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" align=\"center\">" >> $1.html

    if [ ! -z "$DESC" ]; then
      echo "    <tr>" >> $1.html
      echo "     <td colspan=\"3\" width=\"350\">" >> $1.html
      echo "      <table border=\"0\" cellpadding=\"2\" cellspacing=\"0\">" >> $1.html
      echo "       <tr>" >> $1.html
      echo "        <td class=\"description\">" >> $1.html
      echo "         <b>$W_ID</b>: $DESC" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
      echo "      </table>" >> $1.html
      echo "     </td>" >> $1.html
      echo "    </tr>" >> $1.html
      echo "    <tr>" >> $1.html
      echo "     <td colspan=\"3\" align=\"center\">" >> $1.html
      echo "      &nbsp;" >> $1.html
      echo "     </td>" >> $1.html
      echo "    </tr>" >> $1.html
    fi

    echo "    <tr>" >> $1.html
    echo "     <td>" >> $1.html
    echo "      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" align=\"center\">" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"3\">" >> $1.html
    echo "         <table border=\"0\" cellspacing=\"0\" cellpadding=\"6\" width=\"100%\" class=\"table_text\">" >> $1.html
    echo "          <tr>" >> $1.html

    if [ $TOTIMGS -eq 1 ]; then
      echo "           <td width=\"100%\" valign=\"middle\" align=\"center\">" >> $1.html
      echo "            <a href=\"../index$SUFFIX.html\">$W_TP</a>" >> $1.html
    else
      echo "           <td width=\"28%\" valign=\"middle\" align=\"left\">" >> $1.html
      echo "            <a href=\"$PREFIX$PREV.html\" title=\"$W_PREV\"><img src=\"./Tn_$PREV\" border=\"1\" alt=\"$PREV\"></a>" >> $1.html
      echo "           </td>" >> $1.html
      echo "           <td width=\"44%\" valign=\"middle\" align=\"center\">" >> $1.html
      echo "            <a href=\"../index$SUFFIX.html\">$W_TP</a>" >> $1.html
      echo "           </td>" >> $1.html
      echo "           <td width=\"28%\" valign=\"middle\" align=\"right\">" >> $1.html
      echo "            <a href=\"$PREFIX$NEXT.html\" title=\"$W_NEXT\"><img src=\"./Tn_$NEXT\" border=\"1\" alt=\"$NEXT\"></a>" >> $1.html
    fi

    echo "           </td>" >> $1.html
    echo "          </tr>" >> $1.html
    echo "         </table>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "      </table>" >> $1.html
    echo "     </td>" >> $1.html
    echo "    </tr>" >> $1.html
    echo "   </table>" >> $1.html
    echo "  </td>" >> $1.html
    echo " </tr>" >> $1.html
    echo "</table>" >> $1.html

    html_reference "$DIR/data/$PREFIX$FILENAME"
    html_validator "$DIR/data/$PREFIX$FILENAME"
    html_close "$DIR/data/$PREFIX$FILENAME"
}

html_image_information() {
  if [ "$DIR" != "$DPATH" ]; then
    process_main_endpoint
  fi

  if [ "$DIR" = "$DPATH" ]; then
    html_open "$DIR/data/$FILENAME.details" "$TFILENAME ($W_IMAGEINFO)" "../"
  else
    html_open "$DIR/data/$FILENAME.details" "$TFILENAME ($W_IMAGEINFO)" "../$ENDPOINT"
  fi

  html_subopen "$DIR/data/$PREFIX$FILENAME.details" "$TFILENAME"
  html_image_path "$DIR/data/$FILENAME.details"

  echo "       <tr>" >> $1.html
  echo "        <td align=\"center\" class=\"table_misc\">" >> $1.html
  echo "         <a href=\"./Med_$FILENAME.html\">$W_BTTI</a>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" align=\"center\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td colspan=\"3\" align=\"center\">" >> $1.html
  echo "      &nbsp;" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td colspan=\"3\" align=\"center\" class=\"table_subtitle\">" >> $1.html
  echo "      <b>$FILENAME</b>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td valign=\"top\">" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"4\" cellspacing=\"0\" align=\"center\" class=\"table_subtitle\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td>" >> $1.html
  echo "         &nbsp;" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"center\">" >> $1.html
 
  if [ ! -z "$DESC" ]; then
    echo "         <img src=\"./Tn_$FILENAME\" border=\"1\" alt=\"$DESC\">" >> $1.html
  else
    echo "         <img src=\"./Tn_$FILENAME\" border=\"1\" alt=\"$FILENAME\">" >> $1.html
  fi

  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td>" >> $1.html
  echo "         <a href=\"#img\">$W_IC</a>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html

  if [ ! -z "$DESC" ]; then
    echo "       <tr>" >> $1.html
    echo "        <td>" >> $1.html
    echo "         <a href=\"#desc\">$W_ID</a>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  fi

  if [ `cat $TEMP/matew-$USER/.exif_info | wc -l | sed s/^\ *//` -gt 1 ]; then
    echo "       <tr>" >> $1.html
    echo "        <td>" >> $1.html
    echo "         <a href=\"#dci\">$W_DCI</a>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  fi

  if [ `cat $TEMP/matew-$USER/.exif_set | wc -l | sed s/^\ *//` -gt 1 ]; then
    echo "       <tr>" >> $1.html
    echo "        <td>" >> $1.html
    echo "         <a href=\"#dcs\">$W_DCS</a>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  fi
 
  echo "       <tr>" >> $1.html
  echo "        <td>" >> $1.html
  echo "         &nbsp;" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "     <td valign=\"top\">" >> $1.html
  echo "      &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" >> $1.html
  echo "     </td>" >> $1.html
  echo "     <td valign=\"top\">" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"5\" cellspacing=\"2\" align=\"center\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td colspan=\"2\">" >> $1.html
  echo "         &nbsp;" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td colspan=\"2\" width=\"350\" align=\"center\" class=\"table_text\">" >> $1.html
  echo "         <b><a href=\"#top\" name=\"img\">$W_IC</a></b>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html

  DATETIME="`cat $TEMP/matew-$USER/.exif_set | grep 'DateTimeOriginal:' | awk '{print $2}'`"
  if [ ! -z "$DATETIME" ]; then
    echo "       <tr>" >> $1.html
    echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
    echo "         $W_DATE" >> $1.html
    echo "        </td>" >> $1.html
    echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
    echo "         <tt>`cat $TEMP/matew-$USER/.exif_set | grep 'DateTimeOriginal:' | awk '{print $2}' | sed s/':'/'\/'/g` `cat $TEMP/matew-$USER/.exif_set | grep 'DateTimeOriginal:' | awk '{print $3}'`</tt>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  fi

  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
  echo "         <abbr title=\"$W_FMT_TITLE\">$W_FMT</abbr>" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
  echo "         <tt>`cat $TEMP/matew-$USER/.img | grep 'Format:' | awk '{print $2}'`</tt>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
  echo "         $W_IS" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
  echo "         <tt>`cat $TEMP/matew-$USER/.img | grep 'Filesize:' | awk '{print $2}'`</tt>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
  echo "         $W_OIW" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
  echo "         <tt>`identify -format %w $IMAGE 2>/dev/null | grep -v "^$"`</tt>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
  echo "         $W_OIH" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
  echo "         <tt>`identify -format %h $IMAGE 2>/dev/null | grep -v \"^$\"`</tt>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
  echo "         <abbr title=\"$W_NOS_TITLE\">$W_NOS</abbr>" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
  echo "         <tt>`identify -format %n $IMAGE 2>/dev/null | grep -v \"^$\"`</tt>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
  echo "         $W_SIC" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
  echo "         <tt>`cat $TEMP/matew-$USER/.img | grep 'Colors:' | awk '{print $2}'`</tt>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
  echo "         <abbr title=\"$W_SPP_TITLE\">$W_SPP</abbr>" >> $1.html
  echo "        </td>" >> $1.html
  echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
  echo "         <tt>`cat $TEMP/matew-$USER/.img | grep 'Depth:' | awk '{print $2}'`</tt>" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html

  if [ ! -z "`cat $TEMP/matew-$USER/.img | grep 'Resolution:' | awk '{print $2}'`" ]; then
    echo "       <tr>" >> $1.html
    echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
    echo "         <abbr title=\"$W_PR_TITLE\">$W_PR</abbr>" >> $1.html
    echo "        </td>" >> $1.html
    echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
    echo "         <tt>`cat $TEMP/matew-$USER/.img | grep 'Resolution:' | awk '{print $2}'` dpi</tt>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  fi

  if [ -f $TEMP/matew-$USER/.exif_info ]; then
    if [ `cat $TEMP/matew-$USER/.exif_info | wc -l | sed s/^\ *//` -eq 1 ] && [ ! -z "`cat $TEMP/matew-$USER/.exif_info | grep 'Software:' | sed s/\"Software: \"/\"\"/g`" ]; then
      echo "       <tr>" >> $1.html
      echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
      echo "         <abbr title=\"Software used to edit the $W_IMAGE\">Software</abbr>" >> $1.html
      echo "        </td>" >> $1.html
      echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
      echo "         <tt>`cat $TEMP/matew-$USER/.exif_info | grep 'Software:' | sed s/\"Software: \"/\"\"/g`</tt>" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi
  fi

  if [ ! -z "$DESC" ]; then
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"2\">" >> $1.html
    echo "         &nbsp;" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"2\" align=\"center\" class=\"table_text\">" >> $1.html
    echo "         <b><a href=\"#top\" name=\"desc\">$W_ID</a></b>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"2\" width=\"350\" align=\"left\" class=\"text_justify\">" >> $1.html
    echo "         $DESC" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
  fi

  if [ `cat $TEMP/matew-$USER/.exif_info | wc -l | sed s/^\ *//` -gt 1 ]; then
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"2\">" >> $1.html
    echo "         &nbsp;" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"2\" align=\"center\" class=\"table_text\">" >> $1.html
    echo "         <b><a href=\"#top\" name=\"dci\">$W_DCI</a></b>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
    echo "         $W_CMA" >> $1.html
    echo "        </td>" >> $1.html
    echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
    echo "         <tt>`cat $TEMP/matew-$USER/.exif_info | grep 'Make:' | sed s/\"Make: \"/\"\"/g`</tt>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
    echo "         $W_CMO" >> $1.html
    echo "        </td>" >> $1.html
    echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
    echo "         <tt>`cat $TEMP/matew-$USER/.exif_info | grep 'Model:' | sed s/\"Model: \"/\"\"/g`</tt>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html

    if [ ! -z "`cat $TEMP/matew-$USER/.exif_info | grep 'Software:' | sed s/\"Software: \"/\"\"/g`" ]; then
      echo "       <tr>" >> $1.html
      echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
      echo "         <abbr title=\"Firmware (internal software of digicam) version number\">Camera software</abbr>" >> $1.html
      echo "        </td>" >> $1.html
      echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
      echo "         <tt>`cat $TEMP/matew-$USER/.exif_info | grep 'Software:' | sed s/\"Software: \"/\"\"/g`</tt>" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi
  fi

  if [ `cat $TEMP/matew-$USER/.exif_set | wc -l | sed s/^\ *//` -gt 1 ]; then
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"2\">" >> $1.html
    echo "         &nbsp;" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td colspan=\"2\" align=\"center\" class=\"table_text\">" >> $1.html
    echo "         <b><a href=\"#top\" name=\"dcs\">$W_DCS</a></b>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html
    echo "       <tr>" >> $1.html
    echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
    echo "         $W_EV" >> $1.html
    echo "        </td>" >> $1.html
    echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
    echo "         <tt>`cat $TEMP/matew-$USER/.exif_set | grep 'ExifVersion:' | sed s/\"ExifVersion: \"/\"\"/g`</tt>" >> $1.html
    echo "        </td>" >> $1.html
    echo "       </tr>" >> $1.html

    FLASH="`cat $TEMP/matew-$USER/.img | grep 'Flash:' | awk '{print $2}'`"
    if [ ! -z "$FLASH" ]; then
      echo "       <tr>" >> $1.html
      echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
      echo "         Flash" >> $1.html
      echo "        </td>" >> $1.html
      echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
      echo "         <tt>`cat $TEMP/matew-$USER/.exif_set | grep 'Flash:' | sed s/\"Flash: \"/\"\"/g`</tt>" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi

    EXPTIME="`cat $TEMP/matew-$USER/.exif_set | grep 'ExposureTime:' | awk '{print $2}'`"
    if [ ! -z "$EXPTIME" ]; then
      LVALUE="`echo $EXPTIME | sed s/'\/'/' '/g | awk '{print $1}'`"
      RVALUE="`echo $EXPTIME | sed s/'\/'/' '/g | awk '{print $2}'`"
      EXPTIME1="`expr $LVALUE / $RVALUE 2>/dev/null`"
      EXPTIME2="`expr $LVALUE % $RVALUE 2>/dev/null`"
      OUTEXPTIME="$EXPTIME1.$EXPTIME2"
      echo "       <tr>" >> $1.html
      echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
      echo "         <abbr title=\"$W_ET_TITLE\">$W_ET</abbr>" >> $1.html
      echo "        </td>" >> $1.html
      echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
      echo "         <tt>$OUTEXPTIME $W_SECOND</tt>" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi

    MAXAP="`cat $TEMP/matew-$USER/.exif_set | grep 'MaxApertureValue:' | awk '{print $2}'`"
    if [ ! -z "$MAXAP" ]; then
      LVALUE="`echo $MAXAP | sed s/'\/'/' '/g | awk '{print $1}'`"
      RVALUE="`echo $MAXAP | sed s/'\/'/' '/g | awk '{print $2}'`"
      MAXAP1="`expr $LVALUE / $RVALUE 2>/dev/null`"
      MAXAP2="`expr $LVALUE % $RVALUE 2>/dev/null`"
      OUTMAXAP="$MAXAP1.$MAXAP2"
      echo "       <tr>" >> $1.html
      echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
      echo "         <abbr title=\"$W_MA_TITLE\">$W_MA</abbr>" >> $1.html
      echo "        </td>" >> $1.html
      echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
      echo "         <tt>$OUTMAXAP APEX</tt>" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi

    FLENGTH="`cat $TEMP/matew-$USER/.exif_set | grep 'FocalLength:' | awk '{print $2}'`"
    if [ ! -z "$FLENGTH" ]; then
      LVALUE="`echo $FLENGTH | sed s/'\/'/' '/g | awk '{print $1}'`"
      RVALUE="`echo $FLENGTH | sed s/'\/'/' '/g | awk '{print $2}'`"
      FLENGTH1="`expr $LVALUE / $RVALUE 2>/dev/null`"
      FLENGTH2="`expr $LVALUE % $RVALUE 2>/dev/null`"
      OUTFLENGTH="$FLENGTH1.$FLENGTH2"
      echo "       <tr>" >> $1.html
      echo "        <td align=\"left\" class=\"table_text\">" >> $1.html
      echo "         <abbr title=\"$W_FL_TITLE\">$W_FL</abbr>" >> $1.html
      echo "        </td>" >> $1.html
      echo "        <td align=\"right\" class=\"table_text_out\">" >> $1.html
      echo "         <tt>$OUTFLENGTH $W_MILL</tt>" >> $1.html
      echo "        </td>" >> $1.html
      echo "       </tr>" >> $1.html
    fi
  fi

  echo "       <tr>" >> $1.html
  echo "        <td colspan=\"2\">" >> $1.html
  echo "         &nbsp;" >> $1.html
  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\" class=\"table_misc\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td width=\"50%\" align=\"left\">" >> $1.html
  echo "      <a href=\"../index$SUFFIX.html\">$W_TP</a>" >> $1.html
  echo "     </td>" >> $1.html
  echo "     <td width=\"50%\" align=\"right\">" >> $1.html
  echo "      <a href=\"./Med_$FILENAME.html\">$W_BTTI</a>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo "</table>" >> $1.html

  html_reference "$DIR/data/$FILENAME.details"
  html_validator "$DIR/data/$FILENAME.details"
  html_close "$DIR/data/$FILENAME.details"
}

html_pre_thumbindex() {
  echo "        <td align=\"right\" class=\"table_misc\">" >> $1.html

  if [ $TOTIMGS -eq 1 ]; then
    echo "         &nbsp;&nbsp;$TOTIMGS $W_IMAGE" >> $1.html
  else
    echo "         &nbsp;&nbsp;$TOTIMGS $W_IMAGES" >> $1.html
  fi

  echo "        </td>" >> $1.html
  echo "       </tr>" >> $1.html

  html_middle1 "$DIR/index$SUFFIX"

  if [ -z "$SUFFIX" ]; then
    SF="0"
  else
    SF="$SUFFIX"
  fi

  if [ ! -z "$SUFFIX" ]; then
    if [ $SUFFIX -ge 0 ] && [ -f $DIR/index0.html ]; then
      echo "          <tr>" >> $1.html
      echo "           <td>" >> $1.html
      echo "            <a href=\"./index.html\">$W_SALBUMS</a>" >> $1.html
      echo "           </td>" >> $1.html
      echo "          </tr>" >> $1.html
    fi
  fi

  TPAGES="`expr $TOTPAGES - 1 2>/dev/null`"
  for ITEM in `seq 0 $TPAGES`; do
    echo "         <tr>" >> $1.html
    echo "          <td>" >> $1.html
    if [ $ITEM -eq $SF ]; then
      if [ $TPAGES -eq 0 ]; then
        echo "            $W_TP" >> $1.html
      else
        echo "            $W_TP `expr $ITEM + 1`" >> $1.html
      fi
    elif [ $ITEM -eq 0 ] && [ -f $DIR/index0.html ]; then
      echo "           <a href=\"./index0.html\">$W_TP `expr $ITEM + 1`</a>" >> $1.html
    elif [ $ITEM -eq 0 ]; then
      echo "           <a href=\"./index.html\">$W_TP `expr $ITEM + 1`</a>" >> $1.html
    else
      echo "           <a href=\"./index$ITEM.html\">$W_TP `expr $ITEM + 1`</a>" >> $1.html
    fi
    echo "          </td>" >> $1.html
    echo "         </tr>" >> $1.html
  done

  html_middle3 "$DIR/index$SUFFIX" "$W_TP"

  echo "        <td align=\"right\" class=\"table_misc\">" >> $1.html

  if [ $TOTPAGES -eq 1 ]; then
    echo "         &nbsp;" >> $1.html
  else
    if [ -z "$SUFFIX" ]; then
      echo "         1/$TOTPAGES" >> $1.html
    else
      echo "         `expr $SUFFIX + 1`/$TOTPAGES" >> $1.html
    fi
  fi

  html_middle4 "$DIR/index$SUFFIX"

  echo "  <td align=\"center\">" >> $1.html
  echo "   &nbsp;" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td align=\"center\" valign=\"top\">" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\">" >> $1.html
  echo "       <tr>" >> $1.html
}

html_post_thumbindex() {
  echo "       </tr>" >> $1.html
  echo "      </table>" >> $1.html
  echo "     </td>" >> $1.html
  echo "    </tr>" >> $1.html
  echo "   </table>" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td align=\"center\">" >> $1.html
  echo "   &nbsp;" >> $1.html
  echo "  </td>" >> $1.html
  echo " </tr>" >> $1.html
  echo " <tr>" >> $1.html
  echo "  <td>" >> $1.html
  echo "   <table border=\"0\" cellpadding=\"6\" cellspacing=\"0\" width=\"100%\" class=\"table_misc\">" >> $1.html
  echo "    <tr>" >> $1.html
  echo "     <td>" >> $1.html
  echo "      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">" >> $1.html
  echo "       <tr>" >> $1.html
  echo "        <td align=\"center\" class=\"table_misc\">" >> $1.html

  TPAGES="`expr $TOTPAGES - 1 2>/dev/null`"
  for ITEM in `seq 0 $TPAGES`; do
    if [ $ITEM -eq $SF ]; then
      if [ $TPAGES -le 0 ]; then
        echo "         &nbsp;" >> $1.html
      else
        echo "         `expr $ITEM + 1`&nbsp;" >> $1.html
      fi
    elif [ $ITEM -eq 0 ] && [ -f $DIR/index0.html ]; then
      echo "         <a href=\"./index0.html\">`expr $ITEM + 1`</a>&nbsp;" >> $1.html
    elif [ $ITEM -eq 0 ]; then
      echo "         <a href=\"./index.html\">`expr $ITEM + 1`</a>&nbsp;" >> $1.html
    else
      echo "         <a href=\"./index$ITEM.html\">`expr $ITEM + 1`</a>&nbsp;" >> $1.html
    fi
  done
}

html_thumbindex() {
  if [ -f $DIR/index.html ]; then
    SUFFIX="0"
  fi

  html_parser
  html_open "$DIR/index$SUFFIX" "$ALBUMNAME" "$ENDPOINT"
  html_subopen "$DIR/index$SUFFIX" "$ALBUMNAME" "800"
  html_pre_thumbindex "$DIR/index$SUFFIX"

  NUMLINE="1"
  NIMAGE="1"
  for IMAGE in `cat $TEMP/matew-$USER/data_images`; do
    TOTALIMGS="`cat $TEMP/matew-$USER/data_images | grep -v '^$' | wc -l | sed s/^\ *//`"
    identify -verbose $IMAGE 2>/dev/null | grep -e 'Format:' -e 'Depth:' -e 'Colors:' -e 'Resolution:' -e 'Filesize:' > $TEMP/matew-$USER/.img
    identify -format %[EXIF:*] $IMAGE 2>/dev/null | grep -e 'Make=' -e 'Model=' -e 'Software=' | sed s/"="/": "/g > $TEMP/matew-$USER/.exif_info
    identify -format %[EXIF:*] $IMAGE 2>/dev/null | grep -e 'ExposureTime=' -e 'ExifVersion=' -e 'DateTimeOriginal=' -e 'MaxApertureValue=' -e 'Flash=' -e 'FocalLength='| sed s/"="/": "/g > $TEMP/matew-$USER/.exif_set
    FILENAME=`echo $IMAGE | sed -n 's/.*\/\([^/]*.*\).*/\1/p'`
    TFILENAME="`identify -format %t $IMAGE 2>/dev/null | head -1 | sed -e \"s/_/ /g\" | grep -v \"^$\"`"
    DESC="`cat $DIR/image_descriptions | grep "^$FILENAME" | head -1 | tr -d '\"\t' | sed s/$FILENAME//g | sed s/^\ *//`"

    NUM="`cat $TEMP/matew-$USER/data_images | nl | grep "/$FILENAME$" | awk '{print $1}'`"
    PNUM="`expr $NUM - 1`"
    PREV="`cat $TEMP/matew-$USER/data_images | nl | sed s/^\ *// | grep "^$PNUM" | head -1 | sed -n 's/.*\/\([^/]*\).*/\1/p'`"
    if [ -z "$PREV" ]; then
      PREV="`cat $TEMP/matew-$USER/data_images | tail -1 | sed -n 's/.*\/\([^/]*\).*/\1/p'`"
    fi

    NNUM="`expr $NUM + 1`"
    NEXT="`cat $TEMP/matew-$USER/data_images | nl | sed s/^\ *// | grep "^$NNUM" | head -1 | sed -n 's/.*\/\([^/]*\).*/\1/p'`"
    if [ -z "$NEXT" ]; then
      NEXT="`cat $TEMP/matew-$USER/data_images | head -1 | sed -n 's/.*\/\([^/]*\).*/\1/p'`"
    fi

    echo "        <td align=\"center\">" >> $DIR/index$SUFFIX.html
    echo "         <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">" >> $DIR/index$SUFFIX.html
    echo "          <tr>" >> $DIR/index$SUFFIX.html
    echo "           <td colspan=\"3\" align=\"center\" class=\"table_subtitle2\">" >> $DIR/index$SUFFIX.html
    echo "            $TFILENAME" >> $DIR/index$SUFFIX.html
    echo "           </td>" >> $DIR/index$SUFFIX.html
    echo "          </tr>" >> $DIR/index$SUFFIX.html
    echo "          <tr>" >> $DIR/index$SUFFIX.html
    echo "           <td colspan=\"3\" align=\"center\" class=\"table_misc\">" >> $DIR/index$SUFFIX.html
    echo "            <a href=\"./data/Med_$FILENAME.html\" title=\"$FILENAME\"><img src=\"./data/Tn_$FILENAME\" border=\"1\" alt=\"$FILENAME\"></a>" >> $DIR/index$SUFFIX.html
    echo "           </td>" >> $DIR/index$SUFFIX.html
    echo "          </tr>" >> $DIR/index$SUFFIX.html
    echo "          <tr>" >> $DIR/index$SUFFIX.html
    echo "           <td align=\"right\" class=\"table_subtitle2\">" >> $DIR/index$SUFFIX.html
    echo "            <a href=\"./data/Sm_$FILENAME.html\">$W_SM</a>" >> $DIR/index$SUFFIX.html
    echo "           </td>" >> $DIR/index$SUFFIX.html
    echo "           <td align=\"center\" class=\"table_subtitle2\">" >> $DIR/index$SUFFIX.html
    echo "            <a href=\"./data/Med_$FILENAME.html\">$W_MED</a>" >> $DIR/index$SUFFIX.html
    echo "           </td>" >> $DIR/index$SUFFIX.html
    echo "           <td align=\"left\" class=\"table_subtitle2\">" >> $DIR/index$SUFFIX.html
    echo "            <a href=\"./data/$FILENAME.html\">$W_LG</a>" >> $DIR/index$SUFFIX.html
    echo "           </td>" >> $DIR/index$SUFFIX.html
    echo "          </tr>" >> $DIR/index$SUFFIX.html
    echo "         </table>" >> $DIR/index$SUFFIX.html
    echo "        </td>" >> $DIR/index$SUFFIX.html

    if [ $NUMLINE -eq 4 ] && [ $NIMAGE -ne $THUMBS ] && [ "$IMAGE" != "`cat $TEMP/matew-$USER/data_images | tail -1`" ]; then
      echo "       </tr>" >> $DIR/index$SUFFIX.html
      echo "       <tr>" >> $DIR/index$SUFFIX.html
      NUMLINE="1"
    else
      NUMLINE="`expr $NUMLINE + 1`"
    fi

    if [ $NIMAGE -eq $THUMBS ]; then
      html_post_thumbindex "$DIR/index$SUFFIX"
      html_subclose2 "$DIR/index$SUFFIX"
      html_reference "$DIR/index$SUFFIX"
      html_validator "$DIR/index$SUFFIX"
      html_close "$DIR/index$SUFFIX"

      for ITEM in `seq 0 2` ; do
        if [ $ITEM -eq 0 ]; then
          PREFIX="Sm_"
          PPREFIX="./Sm_"
        elif [ $ITEM -eq 1 ]; then
          PREFIX="Med_"
          PPREFIX="./Med_"
        elif [ $ITEM -eq 2 ]; then
          PREFIX=""
          PPREFIX="../"
        fi
        html_image "$DIR/data/$PREFIX$FILENAME"
      done

      html_image_information "$DIR/data/$FILENAME.details"

      if [ $TOTALIMGS -ne $THUMBS ]; then
        NIMAGE="1"
        NUMLINE="1"
        SUFFIX="`expr $SUFFIX + 1`"

        if [ "$DIR" = "$DPATH" ]; then
          ENDPOINT="./"
        else
          process_main_endpoint
        fi

        html_open "$DIR/index$SUFFIX" "$ALBUMNAME" "$ENDPOINT"
        html_subopen "$DIR/index$SUFFIX" "$ALBUMNAME" "800"
        html_pre_thumbindex "$DIR/index$SUFFIX"
      fi
    else
      NIMAGE="`expr $NIMAGE + 1`"

      for ITEM in `seq 0 2` ; do
        if [ $ITEM -eq 0 ]; then
          PREFIX="Sm_"
          PPREFIX="./Sm_"
        elif [ $ITEM -eq 1 ]; then
          PREFIX="Med_"
          PPREFIX="./Med_"
        elif [ $ITEM -eq 2 ]; then
          PREFIX=""
          PPREFIX="../"
        fi
        html_image "$DIR/data/$PREFIX$FILENAME"
      done

      html_image_information "$DIR/data/$FILENAME.details"
    fi
  done

  if [ $TOTALIMGS -ne $THUMBS ]; then
    html_post_thumbindex "$DIR/index$SUFFIX"
    html_subclose2 "$DIR/index$SUFFIX"
    html_reference "$DIR/index$SUFFIX"
    html_validator "$DIR/index$SUFFIX"
    html_close "$DIR/index$SUFFIX"
  fi
}

html_subindex() {
  html_parser
  html_open "$DIR/index" "$ALBUMNAME" "$ENDPOINT"
  html_subopen "$DIR/index" "$ALBUMNAME" "800"

  echo "        <td align=\"right\" class=\"table_misc\">" >> $DIR/index.html

  SCOUNT="0"
  for SALBUM in `cat $TEMP/matew-$USER/.subalbums`; do
    SCOUNT="`expr $SCOUNT + 1`"
  done

  if [ $SCOUNT -eq 1 ]; then
    if [ $TOTIMGS -eq 1 ]; then
      echo "         &nbsp;&nbsp;$TOTIMGS $W_IMAGE, $SCOUNT $W_SALBUM1" >> $DIR/index.html
    else
      echo "         &nbsp;&nbsp;$TOTIMGS $W_IMAGES, $SCOUNT $W_SALBUM1" >> $DIR/index.html
    fi
  elif [ $SCOUNT -gt 1 ]; then
    if [ $TOTIMGS -eq 1 ]; then
      echo "         &nbsp;&nbsp;$TOTIMGS $W_IMAGE, $SCOUNT $W_SALBUMS1" >> $DIR/index.html
    else
      echo "         &nbsp;&nbsp;$TOTIMGS $W_IMAGES, $SCOUNT $W_SALBUMS1" >> $DIR/index.html
    fi

  fi

  echo "        </td>" >> $DIR/index.html
  echo "       </tr>" >> $DIR/index.html

  html_middle1 "$DIR/index"
  html_middle2 "$DIR/index"

  if [ $TOTIMGS -gt 0 ]; then
    TPAGES="`expr $TOTPAGES - 1 2>/dev/null`"
    for ITEM in `seq 0 $TPAGES`; do
      echo "          <tr>" >> $DIR/index.html
      echo "           <td>" >> $DIR/index.html
      if [ $TPAGES -eq 0 ]; then
        echo "            <a href=\"./index$ITEM.html\">$W_TP</a>" >> $DIR/index.html
      else
      echo "            <a href=\"./index$ITEM.html\">$W_TP `expr $ITEM + 1`</a>" >> $DIR/index.html
      fi
      echo "           </td>" >> $DIR/index.html
      echo "          </tr>" >> $DIR/index.html
    done
  fi

  html_middle3 "$DIR/index" "<b>$W_SALBUMS</b>"
  html_middle4 "$DIR/index"
  html_middle5 "$DIR/index"
  html_middle6 "$DIR/index"
  html_subclose1 "$DIR/index"
  html_subclose2 "$DIR/index"
  html_reference "$DIR/index"
  html_validator "$DIR/index"
  html_close "$DIR/index"
}

html_index() {
  html_parser
  html_open "$DIR/index" "$ALBUMNAME" "$ENDPOINT"
  html_subopen "$DIR/index" "$ALBUMNAME" "800"

  echo "        <td align=\"right\" class=\"table_misc\">" >> $DIR/index.html

  SCOUNT="0"
  for SALBUM in `cat $TEMP/matew-$USER/.subalbums`; do
    SCOUNT="`expr $SCOUNT + 1`"
  done

  if [ $SCOUNT -eq 1 ]; then
    echo "         $SCOUNT $W_SALBUM1" >> $DIR/index.html
  elif [ $SCOUNT -gt 1 ]; then
    echo "         $SCOUNT $W_SALBUMS1" >> $DIR/index.html
  fi

  echo "        </td>" >> $DIR/index.html
  echo "       </tr>" >> $DIR/index.html

  html_middle1 "$DIR/index"
  html_middle2 "$DIR/index"
  html_middle3 "$DIR/index" "<b>$W_SALBUMS</b>"
  html_middle4 "$DIR/index"
  html_middle5 "$DIR/index"
  html_middle6 "$DIR/index"
  html_subclose1 "$DIR/index"
  html_subclose2 "$DIR/index"
  html_reference "$DIR/index"
  html_validator "$DIR/index"
  html_close "$DIR/index"
}

process_sl() {
  if [ "`ls -1 $RCONF/matew/languages 2>/dev/null | wc -l | sed s/^\ *//`" -lt 4 ] || [ "`ls -1 $RCONF/matew/styles 2>/dev/null | wc -l | sed s/^\ *//`" -lt 6 ]; then
    SCRIPT_PATH="`echo ${SCRIPT_PATH%/}`"
    LANGS_DIR="$SCRIPT_PATH/languages"
    STYLES_DIR="$SCRIPT_PATH/styles"
  else
    LANGS_DIR="/etc/matew/languages"
    STYLES_DIR="/etc/matew/styles"
  fi

  if [ -f "$DPATH/style.css" ]; then
    if [ -z "$QUERY" ]; then
      echo -e "         \\033[0;34m>\\033[0m CSS style file \\033[0;36m$DPATH/style.css\\033[0m already exists"
    fi
    echo -e "           Do you want to ovewrite it? [default: yes] \c"
    read ANS
    if [ -z "$ANS" -o "$ANS" = "yes" ]; then
      cp -f $STYLES_DIR/$STYLE.css $DPATH/style.css
    elif [ ! -z "$ANS" -a "$ANS" != "yes" -a "$ANS" != "no" ]; then
      echo -e "           Sorry, invalid answer.\n"
      QUERY="open"
      process_sl
    fi
  else
    cp -f $STYLES_DIR/$STYLE.css $DPATH/style.css
  fi

  . $LANGS_DIR/$LANG
}

process_html() {
  DIR=""
  for DIR in `cat $TEMP/matew-$USER/data_dirs.uniq`; do
    ls -1BF $DIR | grep -v '^$' | grep '\/' | sed s/'data\/'/''/g | sed s/'BACKUP\/'/''/g | sed s/'BACKUP-data\/'/''/g | sed s/^\ *// | sed s/'\/'/''/g > $TEMP/matew-$USER/.subalbums
    rm -f $TEMP/matew-$USER/.subalbums.new 2>/dev/null
    for ITEM in `cat $TEMP/matew-$USER/.subalbums`; do
      if [ -z "`cat $TEMP/matew-$USER/dirs | sed -n 's/.*\/\([^/]*.*\).*/\1/p' | grep $ITEM`" ]; then
        cat $TEMP/matew-$USER/.subalbums | grep -v "$ITEM" > $TEMP/matew-$USER/.subalbums
      fi
    done
    if [ -f $TEMP/matew-$USER/data_no_dirs ]; then
      for NODIR in `cat $TEMP/matew-$USER/data_no_dirs`; do
        cat $TEMP/matew-$USER/.subalbums | sed s/"$NODIR"/""/g | grep -v '^$' > $TEMP/matew-$USER/.subalbums
      done
    fi
    echo ${DIR/$DPATH/} > $TEMP/matew-$USER/.dirtree
    cat $TEMP/matew-$USER/.dirtree | sed -e 's/\//\"\n\"/g' | tr -d '\"' | grep -v '^$' > $TEMP/matew-$USER/.dirtree
    COUNT="`cat $TEMP/matew-$USER/.dirtree | wc -l | sed s/^\ *//`"
    ALBUMDESC="`grep -i \"Album description\" $DIR/album_description | tr -d '\"\t' | sed s/"Album description"//g | sed s/^\ *//`"
    NDIR=`echo $DIR | sed -n 's/.*\/\([^/]*\)./\1/p'`
    grep $DIR $TEMP/matew-$USER/DIRS/$NDIR > $TEMP/matew-$USER/data_images
    TOTIMGS="`cat $TEMP/matew-$USER/data_images | wc -l | sed s/^\ *//`"
    DIV="`expr $TOTIMGS / $THUMBS`"
    REST="`expr $TOTIMGS % $THUMBS`"
    if [ $DIV -eq 0 ]; then
      TOTPAGES="1"
    elif [ $DIV -ne 0 ]; then
      if [ $REST -ne 0 ]; then
        TOTPAGES="`expr $DIV + 1`"
      else
        TOTPAGES="$DIV"
      fi
    fi

    DIR="`echo ${DIR%/}`"

    SUFFIX=""
    if [ ! -z "`cat $TEMP/matew-$USER/.subalbums`" ]; then
      html_subindex
    fi

    html_thumbindex
  done

  DIR=""
  for DIR in `cat $TEMP/matew-$USER/dirs`; do
    if [ -z "`ls -1 $DIR | grep 'index.html'`" ]; then
      echo $DIR >> $TEMP/matew-$USER/main_dirs
    fi
  done

  rm $TEMP/matew-$USER/.dirtree 2>/dev/null
  if [ -f "$TEMP/matew-$USER/main_dirs" ]; then
    for DIR in `cat $TEMP/matew-$USER/main_dirs`; do
      ls -1BF $DIR | grep -v '^$' | grep '\/' | sed s/'data\/'/''/g | sed s/'BACKUP\/'/''/g | sed s/'BACKUP-data\/'/''/g | sed s/^\ *// | sed s/'\/'/''/g > $TEMP/matew-$USER/.subalbums
      rm -f $TEMP/matew-$USER/.subalbums.new 2>/dev/null
      for ITEM in `cat $TEMP/matew-$USER/.subalbums`; do
        if [ -z "`cat $TEMP/matew-$USER/dirs | sed -n 's/.*\/\([^/]*.*\).*/\1/p' | grep $ITEM`" ]; then
          cat $TEMP/matew-$USER/.subalbums | grep -v "$ITEM" > $TEMP/matew-$USER/.subalbums
        fi
      done
      if [ -f $TEMP/matew-$USER/data_no_dirs ]; then
        for NODIR in `cat $TEMP/matew-$USER/data_no_dirs`; do
          cat $TEMP/matew-$USER/.subalbums | sed s/"$NODIR"/""/g > $TEMP/matew-$USER/.subalbums
        done
      fi
      echo ${DIR/$DPATH} > $TEMP/matew-$USER/.dirtree
      cat $TEMP/matew-$USER/.dirtree | sed -e 's/\//\"\n\"/g' | tr -d '"' | grep -v '^$' > $TEMP/matew-$USER/.dirtree.new
      mv $TEMP/matew-$USER/.dirtree.new $TEMP/matew-$USER/.dirtree
      COUNT="`cat $TEMP/matew-$USER/.dirtree | wc -l | sed s/^\ *//`"
      DIR="`echo ${DIR%/}`"

      html_index
    done
  fi
}

main() {
export IFS=$'\n'

  DPATH="`echo ${DPATH%/}`"
  TPATH="`echo ${TPATH%/}`"

  checks

  if [ "$STOP" = "yes" ]; then
    DPATH="$TPATH"

    echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Processing information files"
    process_information_files

    cleanup 0
  fi

  if [ "$DPATH" = "$TPATH" ]; then
    echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Backupping original indexes"
    backup_original_html
  fi

  clean_html

  DPATH="$TPATH"

  echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Processing data subdirectories"
  process_data_dirs

  echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Processing information files"
  process_information_files

  echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Creating images data, this step could take a moment"
  process_images

  echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Checking CSS style"
  process_sl

  echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Creating HTML album files, this step could take a moment"
  process_html

  echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Album statistics:"
  echo -e "         \\033[0;34m>\\033[0m Album indexes created: \\033[0;36m`cat $TEMP/matew-$USER/dirs | wc -l | sed s/^\ *//`\\033[0m"
  echo -e "         \\033[0;34m>\\033[0m Images processed: \\033[0;36m`cat $TEMP/matew-$USER/images | wc -l | sed s/^\ *//`\\033[0m"

  echo -e "\\033[0;36m`date +%H:%M`\\033[0m \\033[0;34m>>\\033[0m Album created successfully, check \\033[0;36m$DPATH/index.html\\033[0m"
  cleanup 0
}

# Trap INT, KILL, ALRM and TERM signals
trap 'cleanup 1 2' 2 9 14 15

# Parse option flags
while [ 0 ]; do
  if [ "$1" = "-v" ]; then
    if [ -z "$2" ] || [ -z "$3" ]; then
      help
      cleanup 1
    else
      VERBOSE="2"
      DPATH="$2"
      TPATH="$3"
      STOP="no"
      main
    fi
  elif [ "$1" = "-i" ]; then
    if [ -z "$2" ] || [ -z "$3" ]; then
      help
      cleanup 1
    else
      VERBOSE="1"
      DPATH="$2"
      TPATH="$3"
      STOP="yes"
      main
    fi
  elif [ "$1" = "-h" ] || [ -z "$1" ]; then
    help
    cleanup 0
  elif [ "$1" = "-V" ]; then
    version
    cleanup 0
  elif [ "`echo $1 | cut -c 1`" = "-" ]; then
    help
    cleanup 1
  elif [ -z "$1" ] || [ -z "$2" ]; then
    help
    cleanup 1
  else
    VERBOSE="1"
    DPATH="$1"
    TPATH="$2"
    STOP="no"
    main
  fi
done
