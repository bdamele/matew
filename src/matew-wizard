#!/bin/bash
#
# Name: Matew-wizard - Make Album The Easy Way Wizard
# Author: Bernardo 'inquis' Damele <bernardo@inquis.it>
#
# Matew-wizard is a wizard to help you start running matew. Run this
# script and read the instructions carefully.
#
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GOPYING file for more details.

# Script details
SCRIPT_NAME="Matew-wizard"

# Configuration parameters
CONF="$HOME/.matew"
RCONF="/etc"
TEMP="/tmp"

# Matew-wizard functions
cleanup() {
  rm -rf $TEMP/.matew-wizard-$USER 2>/dev/null

  if [ -z "$2" ]; then
    echo
  else
    echo -e "\n\n\033[1mWARNING\\033[0m: It looks like you cancelled out of the wizard before it was done. \n\
         Unfortunately, I didn't get to write anything to file. Please \n\
         run the wizard again to completion.\n"
  fi

  exit $1
}

help() {
  cat << HELP
Usage: `basename $0` [option]

$SCRIPT_NAME is a wizard to help you start setting matew. Run this
script with no option and read the instructions.

option:
  -h                    print this message
HELP

  cleanup 0
}

desc() {
  echo -e "\n$SCRIPT_NAME is a wizard to help you start setting matew. What it will do is\n\
create a single configuration file needed by matew."
}

start() {
  echo -e "\nStart? [y/n] \c"
  read ITEM
  if [ -z "$ITEM" ]; then
    echo -e "Sorry, that response was not an option."
    start
  elif [ "`echo $ITEM | cut -c 1`" != "y" -a "`echo $ITEM | cut -c 1`" != "n" ]; then
    echo -e "Sorry, invalid answer."
    start
  elif [ "`echo $ITEM | cut -c 1`" = "n" ]; then
    cleanup 0
  fi
}

charset() {
  echo -e "\n\033[1mAlbum pages character encoding\033[0m (CHARSET)\n\
The charset parameter identifies a character encoding, which is a method\n\
of converting a sequence of bytes into a sequence of characters. This\n\
conversion fits naturally with the scheme of Web activity: Servers send HTML\n\
documents to user agents as a stream of bytes; user agents interpret them as\n\
a sequence of characters. A complete list of valid characters encoding can\n\
be listed on http://www.w3.org/International/O-charset-list.html.\n\
Some of them are ISO-8859-1, ISO-8859-15 and UTF-8.\n\
\nWhich charset do you choose? [default: UTF-8] \c"
  read ITEM
  if [ -z "$ITEM" ]; then
    echo "CHARSET=\"UTF-8\"" >> $TEMP/.matew-wizard-$USER
  else
    echo "CHARSET=\"$ITEM\"" >> $TEMP/.matew-wizard-$USER
  fi
}

style() {
  if [ -z "$QUERY" ]; then
    echo -e "\n\033[1mAlbum pages CSS style\033[0m (STYLE)\n\
The style parameter identifies a CSS style, which is the apparance that you\n\
want to apply to your album.\n\
Till now the CSS styles are beige, blue, bluenavy, brown, debian, gentoo and\n\
red."
  fi
  echo -e "\nWhich CSS style do you choose? [default: bluenavy] \c"
  read ITEM
  if [ -z "$ITEM" -o "$ITEM" = "bluenavy" ]; then
    echo "STYLE=\"bluenavy\"" >> $TEMP/.matew-wizard-$USER
  elif [ "$ITEM" = "beige" -o "$ITEM" = "blue" -o "$ITEM" = "bluenavy" -o "$ITEM" = "brown" -o "$ITEM" = "debian" -o "$ITEM" = "gentoo" -o "$ITEM" = "red" ]; then
    echo "STYLE=\"$ITEM\"" >> $TEMP/.matew-wizard-$USER
  else
    echo -e "Sorry, invalid answer."
    QUERY="open"
    style
  fi
  QUERY=""
}

language() {
  if [ -z "$QUERY" ]; then
    echo -e "\n\033[1mAlbum pages texts language\033[0m (LANG)\n\
The language parameter is a two-letters word that identifies the language\n\
you want the text in album pages to be.\n\
Till now the supported languages are brazilian portuguese (br), english\n\
(en), croatian (hr) and italian (it)."
  fi
  echo -e "\nWhat language do you choose? [default: en] \c"
  read ITEM
  if [ -z "$ITEM" -o "$ITEM" = "en" ]; then
    echo "LANG=\"en\"" >> $TEMP/.matew-wizard-$USER
  elif [ "$ITEM" = "br" -o "$ITEM" = "en" -o "$ITEM" = "hr" -o "$ITEM" = "it" ]; then
    echo "LANG=\"$ITEM\"" >> $TEMP/.matew-wizard-$USER
  else
    echo -e "Sorry, invalid answer."
    QUERY="open"
    language
  fi
  QUERY=""
}

extlink() {
  if [ -z "$QUERY" ]; then
    echo -e "\n\033[1mAlbum pages external HTML link\033[0m (LINK)\n\
The link parameter is a valid HTML link to an HTML page that has nothing to\n\
do with the album.\n\
This can be useful in case of you want to visualize at the beginning of all\n\
album pages a link to your home page."
  fi
  echo -e "\nDo you want to add an external HTML link? [default: no] \c"
  read ITEM
  if [ "$ITEM" = "yes" ]; then
    echo -e "Which is the link? \c"
    read ANS
    echo "LINK=\"$ANS\"" >> $TEMP/.matew-wizard-$USER
  elif [ -z "$ITEM" -o "$ITEM" = "no" ]; then
    echo "LINK=\"\"" >> $TEMP/.matew-wizard-$USER
  elif [ ! -z "$ITEM" -a "$ITEM" != "yes" -a "$ITEM" != "no" ]; then
    echo -e "Sorry, invalid answer."
    QUERY="open"
    extlink
  fi
  QUERY=""
}

thumbnails() {
  if [ -z "$QUERY" ]; then
    echo -e "\n\033[1mNumber of thumbnails per page\033[0m (THUMBS)\n\
The thumbnails parameter is a valid number that identifies the amount of\n\
thumbnails you want to see per page.\n\
Note: The number should be preferibly a doubled of four."
  fi
  echo -e "\nHow many thumbnails per page do do you choose? [default: 20] \c"
  read ITEM
  if [ -z "$ITEM" ]; then
    echo "THUMBS=\"20\"" >> $TEMP/.matew-wizard-$USER
  elif [ -z "`echo $ITEM | grep -E '^[0-9]+$'`" ]; then
    echo -e "Sorry, invalid answer."
    QUERY="open"
    thumbnails
  elif [ $ITEM -le 0 ]; then
    echo -e "You have to visualize at least one image per page."
    QUERY="open"
    thumbnails
  else
    echo "THUMBS=\"$ITEM\"" >> $TEMP/.matew-wizard-$USER
  fi
  QUERY=""
}

validator() {
  if [ -z "$QUERY" ]; then
    echo -e "\n\033[1mAlbum HTML and CSS validator boxes\033[0m (VALIDATOR)\n\
The validator parameter is a boolean variable that identifies the will to\n\
visualize, or not, both the HTML and CSS validator boxes at the bottom of\n\
each album page."
  fi
  echo -e "\nDo you want the album pages to visualize the HTML and CSS validator\n\
boxes? [default: yes] \c"
  read ITEM
  if [ -z "$ITEM" -o "$ITEM" = "yes" ]; then
    echo "VALIDATOR=\"yes\"" >> $TEMP/.matew-wizard-$USER
  elif [ "$ITEM" = "no" ]; then
    echo "VALIDATOR=\"no\"" >> $TEMP/.matew-wizard-$USER
  elif [ "$ITEM" != "yes" -a "$ITEM" != "no" ]; then
    echo -e "Sorry, invalid answer."
    QUERY="open"
    validator
  fi
  QUERY=""
}

ratio() {
  if [ -z "$QUERY" ]; then
    echo -e "\n\033[1mImage-to-thumbnail ratio\033[0m (RATIO)\n\
The ratio parameter is a boolean variable that identifies the will to\n\
maintain the original image size when creating its thumbnail."
  fi
  echo -e "\nDo you want to maintain the size ratio for thumbnails? [default: yes] \c"
  read ITEM
  if [ -z "$ITEM" -o "$ITEM" = "yes" ]; then
    echo "RATIO=\"yes\"" >> $TEMP/.matew-wizard-$USER
  elif [ "$ITEM" = "no" ]; then
    echo "RATIO=\"no\"" >> $TEMP/.matew-wizard-$USER
  elif [ "$ITEM" != "yes" -a "$ITEM" != "no" ]; then
    echo -e "Sorry, invalid answer."
    QUERY="open"
    ratio
  fi
  QUERY=""
}

main() {
  cat << HEADER > $TEMP/.matew-wizard-$USER
# Configuration file for Matew - Make Album The Easy Way
#
# Keep the format of this file as is.
# Do NOT change the variables name, just change the values.

HEADER

  desc
  start
  charset
  style
  language
  extlink
  thumbnails
  validator
  ratio

  if [ ! -d "$HOME/.matew" ]; then
    mkdir $HOME/.matew
  else
    rm -rf $HOME/.matew/conf
  fi

  cp -f $TEMP/.matew-wizard-$USER $CONF/conf

  echo -e "\n\033[1mAll done!\033[0m\nThe configuration file has been saved to $CONF/conf.\n\
You can now run matew."

  cleanup 0
}

# Trap INT, KILL, ALRM and TERM signals
trap 'cleanup 1 2' 2 9 14 15

# Parse option flags
if [ ! -z "$1" ]; then
  help
else
  main
fi
